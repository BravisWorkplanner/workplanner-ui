@page "/workers/{Id:int}"
@using System.Threading
@using System.Net.Http.Json
@using APIClient.Model
@using Microsoft.AspNetCore.Components

@if (WorkerGetResult == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@WorkerGetResult"
              OnValidSubmit="@OnValidSubmit"
              OnInvalidSubmit="@OnInvalidSubmit">
        
        <div class="container-fluid">

            <div class="row">
                <div class="col-4">

                    <h2>Editing worker with id: @Id</h2>

                    <div class="form-group">
                        <label for="workerNameInput">Name</label>
                        <InputText @bind-Value="@WorkerGetResult.Name" id="workerNameInput" class="form-control" Placeholder="Enter name"></InputText>
                    </div>

                    <div class="form-group">
                        <label for="workerEmailInput">Email</label>
                        <InputText @bind-Value="@WorkerGetResult.Email" id="workerEmailInput" class="form-control" Placeholder="Enter email"></InputText>
                    </div>

                    <div class="form-group">
                        <label for="workerPhoneNumberInput">Phone number</label>
                        <InputText @bind-Value="@WorkerGetResult.PhoneNumber" id="workerPhoneNumberInput" class="form-control" Placeholder="Enter phone number"></InputText>
                    </div>

                </div>
            </div>
            <button type="submit" class="btn btn-success">Save</button>

        </div>
    </EditForm>
}


@code {

    private WorkerUpdateRequest _workerUpdateRequest;

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }

    protected WorkerGetResult WorkerGetResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient();
        WorkerGetResult = await client.GetFromJsonAsync<WorkerGetResult>("https://localhost:5001/api/v1/workers/" + Id, CancellationToken.None);
    }

    protected async Task OnValidSubmit()
    {
        // map to order update request and send api call
    }

    protected async Task OnInvalidSubmit()
    {
        //  display some error
    }

}
