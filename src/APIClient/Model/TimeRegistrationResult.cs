/*
 * Clean Code API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace APIClient.Model
{
    /// <summary>
    /// TimeRegistrationResult
    /// </summary>
    [DataContract(Name = "TimeRegistrationResult")]
    public partial class TimeRegistrationResult : IEquatable<TimeRegistrationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeRegistrationResult" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="week">week.</param>
        /// <param name="worker">worker.</param>
        /// <param name="hours">hours.</param>
        public TimeRegistrationResult(int id = default(int), DateTime dateTime = default(DateTime), string week = default(string), Worker worker = default(Worker), double hours = default(double))
        {
            this.Id = id;
            this.DateTime = dateTime;
            this.Week = week;
            this.Worker = worker;
            this.Hours = hours;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name = "dateTime", EmitDefaultValue = false)]
        public DateTime DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", EmitDefaultValue = true)]
        public string Week { get; set; }

        /// <summary>
        /// Gets or Sets Worker
        /// </summary>
        [DataMember(Name = "worker", EmitDefaultValue = false)]
        public Worker Worker { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public double Hours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeRegistrationResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeRegistrationResult);
        }

        /// <summary>
        /// Returns true if TimeRegistrationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeRegistrationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeRegistrationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Week == input.Week ||
                    (this.Week != null &&
                    this.Week.Equals(input.Week))
                ) && 
                (
                    this.Worker == input.Worker ||
                    (this.Worker != null &&
                    this.Worker.Equals(input.Worker))
                ) && 
                (
                    this.Hours == input.Hours ||
                    this.Hours.Equals(input.Hours)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.Week != null)
                    hashCode = hashCode * 59 + this.Week.GetHashCode();
                if (this.Worker != null)
                    hashCode = hashCode * 59 + this.Worker.GetHashCode();
                hashCode = hashCode * 59 + this.Hours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
